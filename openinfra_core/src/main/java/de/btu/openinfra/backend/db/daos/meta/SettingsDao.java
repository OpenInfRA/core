package de.btu.openinfra.backend.db.daos.meta;

import java.util.Locale;
import java.util.UUID;

import de.btu.openinfra.backend.OpenInfraTime;
import de.btu.openinfra.backend.db.MappingResult;
import de.btu.openinfra.backend.db.OpenInfraSchemas;
import de.btu.openinfra.backend.db.daos.OpenInfraDao;
import de.btu.openinfra.backend.db.jpa.model.meta.Settings;
import de.btu.openinfra.backend.db.pojos.meta.SettingsPojo;
import de.btu.openinfra.backend.exception.OpenInfraEntityException;
import de.btu.openinfra.backend.exception.OpenInfraExceptionTypes;

/**
 * This class represents the Settings and is used to access the underlying
 * layer generated by JPA.
 *
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class SettingsDao
    extends OpenInfraDao<SettingsPojo, Settings> {

    /**
     * This is the required constructor which calls the super constructor and in
     * turn creates the corresponding entity manager.
     * @param currentProjectId The identifier of the current project.
     * @param schema           the required schema
     */
    public SettingsDao(UUID currentProjectId, OpenInfraSchemas schema) {
        super(null, OpenInfraSchemas.META_DATA, Settings.class);
    }

    @Override
    public SettingsPojo mapToPojo(Locale locale, Settings s) {
        if (s != null) {
            SettingsPojo pojo = new SettingsPojo(s);
            pojo.setKey(new SettingKeysDao(
                    currentProjectId,
                    schema).mapToPojo(locale, s.getSettingKey()));
            pojo.setUpdatedOn(OpenInfraTime.format(s.getUpdatedOn()));
            pojo.setValue(s.getValue());
            pojo.setProject(new ProjectsDao(
                    currentProjectId,
                    schema).mapToPojo(locale, s.getProject()));
            return pojo;
        } else {
            return null;
        }
    }

    @Override
    public MappingResult<Settings> mapToModel(SettingsPojo pojo, Settings s) {
        if(pojo != null) {
            Settings resultSettings = null;
            try {
                resultSettings = s;
                if(resultSettings == null) {
                    resultSettings = new Settings();
                    resultSettings.setId(pojo.getUuid());
                }
                resultSettings.setSettingKey(
                        new SettingKeysDao(
                                currentProjectId,
                                schema).mapToModel(
                                        pojo.getKey(),
                                        null).getModelObject());
                resultSettings.setValue(pojo.getValue());
                // Set a new timestamp in any case since the probability is
                // extremely high that the model object is stored in the database.
                // It's recommended to use POJO objects for internal usage. In any
                // case, it should be avoided to retrieve a POJO object from
                // database and to transform it into model object afterwards for
                // internal processing.
                resultSettings.setUpdatedOn(OpenInfraTime.now());
                resultSettings.setProject(
                        new ProjectsDao(
                                currentProjectId,
                                schema).mapToModel(
                                        pojo.getProject(),
                                        null).getModelObject());
            } catch (NullPointerException npe) {
                throw new OpenInfraEntityException(
                        OpenInfraExceptionTypes.MISSING_DATA_IN_POJO);
            }
            return new MappingResult<Settings>(
                    resultSettings.getId(),
                    resultSettings);
        }
        else {
            return null;
        }
    }

}
