package de.btu.openinfra.backend.db.daos;

import java.util.Locale;
import java.util.UUID;

import de.btu.openinfra.backend.db.jpa.model.AttributeTypeToAttributeTypeGroup;
import de.btu.openinfra.backend.db.jpa.model.AttributeValueDomain;
import de.btu.openinfra.backend.db.jpa.model.TopicInstance;
import de.btu.openinfra.backend.db.jpa.model.ValueListValue;
import de.btu.openinfra.backend.db.pojos.AttributeValueDomainPojo;

/**
 * This class represents the AttributeValueDomain and is used to access the
 * underlying layer generated by JPA.
 *
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class AttributeValueDomainDao extends
	OpenInfraDao<AttributeValueDomainPojo, AttributeValueDomain> {

	/**
	 * This is the required constructor which calls the super constructor and in
	 * turn creates the corresponding entity manager.
	 *
	 * @param currentProjectId the current project id (this should be null when
	 *                         the system schema is selected)
	 * @param schema           the required schema
	 */
	public AttributeValueDomainDao(
			UUID currentProjectId,
			OpenInfraSchemas schema) {
		super(currentProjectId, schema, AttributeValueDomain.class);
	}

	@Override
	public AttributeValueDomainPojo mapToPojo(
			Locale locale,
			AttributeValueDomain modelObject) {
		return mapToPojoStatically(locale, modelObject);
	}

	/**
	 * This method implements the method mapToPojo in a static way.
	 *
	 * @param locale the requested language as Java.util locale
	 * @param avd    the model object
	 * @return       the POJO object when the model object is not null else null
	 */
	public static AttributeValueDomainPojo mapToPojoStatically(
			Locale locale,
			AttributeValueDomain avd) {
		AttributeValueDomainPojo avdPojo =
				new AttributeValueDomainPojo();

		// set the topic instance id
        avdPojo.setTopicInstanceId(avd.getTopicInstance().getId());
        // set the value list value of the object
		avdPojo.setDomain(ValueListValueDao.mapToPojoStatically(
				locale,
				avd.getValueListValue()));
		// set the attribute type to attribute type id group of the value
        avdPojo.setAttributeTypeToAttributeTypeGroupId(
                avd.getAttributeTypeToAttributeTypeGroup().getId());
		// set the id of the object
		avdPojo.setUuid(avd.getId());

		return avdPojo;
	}

	@Override
	public MappingResult<AttributeValueDomain> mapToModel(
			AttributeValueDomainPojo pojo,
			AttributeValueDomain avd) {
	    // return null if the pojo is null

        if (pojo != null) {

            // in case the attribute type to attribute type group id, the
            // topic instance id or the domain is null
            if (pojo.getAttributeTypeToAttributeTypeGroupId() == null ||
                    pojo.getTopicInstanceId() == null ||
                    pojo.getDomain() == null) {
                return null;
            }

            // set value list value
            avd.setValueListValue(em.find(ValueListValue.class,
                    pojo.getDomain().getUuid()));

            // set the attribute type to attribute type group
            avd.setAttributeTypeToAttributeTypeGroup(em.find(
                    AttributeTypeToAttributeTypeGroup.class,
                    pojo.getAttributeTypeToAttributeTypeGroupId()));

            // set the topic instance
            avd.setTopicInstance(
                    em.find(TopicInstance.class, pojo.getTopicInstanceId()));

            return new MappingResult<AttributeValueDomain>(avd.getId(), avd);
        } else {
            return null;
        }
	}

}
