package de.btu.openinfra.backend.db.daos.meta;

import java.util.Locale;
import java.util.UUID;

import de.btu.openinfra.backend.db.MappingResult;
import de.btu.openinfra.backend.db.OpenInfraSchemas;
import de.btu.openinfra.backend.db.daos.OpenInfraDao;
import de.btu.openinfra.backend.db.jpa.model.meta.DatabaseConnection;
import de.btu.openinfra.backend.db.pojos.meta.DatabaseConnectionPojo;
import de.btu.openinfra.backend.exception.OpenInfraEntityException;
import de.btu.openinfra.backend.exception.OpenInfraExceptionTypes;

/**
 * This class represents the DatabaseConnection and is used to access the
 * underlying layer generated by JPA.
 *
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class DatabaseConnectionDao
    extends OpenInfraDao<DatabaseConnectionPojo, DatabaseConnection> {

    /**
     * This is the required constructor which calls the super constructor and in
     * turn creates the corresponding entity manager.
     * @param currentProjectId The identifier of the current project.
     * @param schema           the required schema
     */
    public DatabaseConnectionDao(
            UUID currentProjectId,
            OpenInfraSchemas schema) {
        super(null, OpenInfraSchemas.META_DATA, DatabaseConnection.class);
    }

    @Override
    public DatabaseConnectionPojo mapToPojo(Locale locale,
            DatabaseConnection dc) {
        if (dc != null) {
            DatabaseConnectionPojo pojo = new DatabaseConnectionPojo(dc);
            pojo.setServer(new ServersDao(
                    currentProjectId,
                    schema).mapToPojo(locale, dc.getServerBean()));
            pojo.setPort(new PortsDao(
                    currentProjectId,
                    schema).mapToPojo(locale, dc.getPortBean()));
            pojo.setDatabase(new DatabasesDao(
                    currentProjectId,
                    schema).mapToPojo(locale, dc.getDatabaseBean()));
            pojo.setSchema(new SchemasDao(
                    currentProjectId,
                    schema).mapToPojo(locale, dc.getSchemaBean()));
            pojo.setCredentials(new CredentialsDao(
                    currentProjectId,
                    schema).mapToPojo(locale, dc.getCredential()));
            return pojo;
        } else {
            return null;
        }
    }

    @Override
    public MappingResult<DatabaseConnection> mapToModel(
            DatabaseConnectionPojo pojo,
            DatabaseConnection dbc) {
        if(pojo != null) {
            DatabaseConnection resultDatabaseConnection = null;

            try {
                resultDatabaseConnection = dbc;
                if(resultDatabaseConnection == null) {
                    resultDatabaseConnection = new DatabaseConnection();
                    resultDatabaseConnection.setId(pojo.getUuid());
                }
                resultDatabaseConnection.setCredential(
                        new CredentialsDao(
                                currentProjectId,
                                schema).mapToModel(
                                        pojo.getCredentials(),
                                        null).getModelObject());
                resultDatabaseConnection.setDatabaseBean(
                        new DatabasesDao(
                                currentProjectId,
                                schema).mapToModel(
                                        pojo.getDatabase(),
                                        null).getModelObject());
                resultDatabaseConnection.setPortBean(
                        new PortsDao(
                                currentProjectId,
                                schema).mapToModel(
                                        pojo.getPort(),
                                        null).getModelObject());
                resultDatabaseConnection.setSchemaBean(
                        new SchemasDao(
                                currentProjectId,
                                schema).mapToModel(
                                        pojo.getSchema(),
                                        null).getModelObject());
                resultDatabaseConnection.setServerBean(
                        new ServersDao(
                                currentProjectId,
                                schema).mapToModel(
                                        pojo.getServer(),
                                        null).getModelObject());
            } catch (NullPointerException npe) {
                throw new OpenInfraEntityException(
                        OpenInfraExceptionTypes.MISSING_DATA_IN_POJO);
            }
            return new MappingResult<DatabaseConnection>(dbc.getId(), dbc);
        }
        else {
            return null;
        }
    }

}
