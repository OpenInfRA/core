package de.btu.openinfra.backend.db.daos;

import java.util.Locale;
import java.util.UUID;

import de.btu.openinfra.backend.db.MappingResult;
import de.btu.openinfra.backend.db.OpenInfraSchemas;
import de.btu.openinfra.backend.db.jpa.model.RelationshipType;
import de.btu.openinfra.backend.db.jpa.model.TopicCharacteristic;
import de.btu.openinfra.backend.db.jpa.model.ValueListValue;
import de.btu.openinfra.backend.db.pojos.RelationshipTypePojo;
import de.btu.openinfra.backend.exception.OpenInfraEntityException;
import de.btu.openinfra.backend.exception.OpenInfraExceptionTypes;

/**
 * This class represents the RelationshipType and is used to access the
 * underlying layer generated by JPA.
 *
 *
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class RelationshipTypeDao extends
	OpenInfraValueDao<RelationshipTypePojo, RelationshipType,
	TopicCharacteristic> {

	/**
	 * This is the required constructor which calls the super constructor and
	 * in turn creates the corresponding entity manager.
	 *
	 * @param currentProjectId the current project id (this should be null when
	 *                         the system schema is selected)
	 * @param schema           the required schema
	 */
	public RelationshipTypeDao(
			UUID currentProjectId,
			OpenInfraSchemas schema) {
		super(
				currentProjectId,
				schema,
				RelationshipType.class,
				TopicCharacteristic.class);
	}

	@Override
	public RelationshipTypePojo mapToPojo(
			Locale locale,
			RelationshipType rt) {
		return mapToPojoStatically(locale, rt,
		        new MetaDataDao(currentProjectId, schema));
	}

	/**
	 * This method implements the method mapToPojo in a static way.
	 *
	 * @param locale the requested language as Java.util locale
	 * @param rt     the model object
	 * @param mdDao  the meta data DAO
	 * @return       the POJO object
	 */
	public static RelationshipTypePojo mapToPojoStatically(
			Locale locale,
			RelationshipType rt,
			MetaDataDao mdDao) {
	    if (rt != null) {
    		RelationshipTypePojo pojo = new RelationshipTypePojo(rt, mdDao);

    		pojo.setRelationshipType(
    				ValueListValueDao.mapToPojoStatically(
    						locale,
    						rt.getValueListValue2(),
    						mdDao));
    		pojo.setDescription(
    				ValueListValueDao.mapToPojoStatically(
    						locale,
    						rt.getValueListValue1(),
    						mdDao));
    		return pojo;
	    } else {
	        return null;
	    }
	}

	@Override
	public MappingResult<RelationshipType> mapToModel(
			RelationshipTypePojo pojo,
			RelationshipType rt) {

	    try {
            // set the description
            rt.setValueListValue1(em.find(ValueListValue.class,
                    pojo.getDescription().getUuid()));

            // set the reference_to
            rt.setValueListValue2(em.find(ValueListValue.class,
                    pojo.getRelationshipType().getUuid()));

        } catch (NullPointerException npe) {
            throw new OpenInfraEntityException(
                    OpenInfraExceptionTypes.NULL_VALUE_IN_POJO);
        }
        // return the model as mapping result
        return new MappingResult<RelationshipType>(rt.getId(), rt);
	}
}
