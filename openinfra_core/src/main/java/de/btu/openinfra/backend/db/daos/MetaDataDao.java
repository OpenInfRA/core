package de.btu.openinfra.backend.db.daos;

import java.util.Locale;
import java.util.UUID;

import javax.json.Json;
import javax.json.JsonObject;

import de.btu.openinfra.backend.db.jpa.model.MetaData;
import de.btu.openinfra.backend.db.pojos.MetaDataPojo;

/**
 * This class represents the MetaData and is used to access the underlying layer 
 * generated by JPA.
 * 
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class MetaDataDao 
    extends OpenInfraDao<MetaDataPojo, MetaData> {

    /**
     * This is the required constructor which calls the super constructor and in 
     * turn creates the corresponding entity manager.
     * 
     * @param currentProjectId the current project id (this should be null when 
     *                         the system schema is selected)
     * @param schema           the required schema
     */
    public MetaDataDao(UUID currentProjectId, OpenInfraSchemas schema) {
        super(currentProjectId, schema, MetaData.class);
    }
    
    @Override
    public MetaDataPojo mapToPojo(Locale locale, MetaData md) {
        return mapPojoStatically(md);
    }

    /**
     * This method implements the method mapToPojo in a static way.
     * 
     * @param at     the model object
     * @return       the POJO object when the model object is not null else null
     */
    public static MetaDataPojo mapPojoStatically(MetaData md) {
        if(md != null) {
            MetaDataPojo pojo = new MetaDataPojo();
            pojo.setUuid(md.getObjectId());
            pojo.setTableName(md.getTableName());
            pojo.setPkColumn(md.getPkColumn());
            pojo.setData(md.getData());
            return pojo;
        } else {
            return null;
        }
    }
    
    @Override
    public MappingResult<MetaData> mapToModel(MetaDataPojo pojo, MetaData md) {
        // 1. If the POJO really exists than go further, otherwise return null.
        if(pojo != null) {
            md.setData(pojo.getData());
            md.setPkColumn(pojo.getPkColumn());
            md.setTableName(pojo.getTableName());
            return new MappingResult<MetaData>(md.getId(), md);
        } else {
            return null;
        } // end if else
    }
    
    public MetaDataPojo newMetaData(Locale locale) {
        // create the return pojo
        MetaDataPojo pojo = new MetaDataPojo();
        
        // set an empty data
        JsonObject jsonObject = Json.createObjectBuilder().build();
        pojo.setData(jsonObject.toString());
        // set an empty primary key column
        pojo.setPkColumn("");
        //set an empty table name
        pojo.setTableName("");
        
        return pojo;
    }

}
