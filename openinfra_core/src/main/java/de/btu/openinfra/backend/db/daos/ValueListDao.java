package de.btu.openinfra.backend.db.daos;

import java.util.Locale;
import java.util.UUID;

import de.btu.openinfra.backend.db.jpa.model.ValueList;
import de.btu.openinfra.backend.db.pojos.ValueListPojo;

/**
 * This class represents the ValueListValue and is used to access the underlying
 * layer generated by JPA.
 *
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class ValueListDao extends OpenInfraDao<ValueListPojo, ValueList> {

	/**
	 * This is the required constructor which calls the super constructor and in
	 * turn creates the corresponding entity manager.
	 *
	 * @param currentProjectId the current project id (this should be null when
	 *                         the system schema is selected)
	 * @param schema           the required schema
	 */
	public ValueListDao(UUID currentProjectId, OpenInfraSchemas schema) {
		super(currentProjectId, schema, ValueList.class);
	}

	@Override
	public ValueListPojo mapToPojo(Locale locale, ValueList vl) {
		return mapToPojoStatically(locale, vl);
	}

	public static ValueListPojo mapToPojoStatically(
			Locale locale,
			ValueList vl) {
		if(vl != null) {
			ValueListPojo vlPojo = new ValueListPojo();
			vlPojo.setNames(NameDao.mapToPojoStatically(
					locale,
					vl.getPtFreeText2()));
			vlPojo.setDescriptions(DescriptionDao.mapToPojoStatically(
					locale,
					vl.getPtFreeText1()));
			vlPojo.setUuid(vl.getId());
			return vlPojo;
		} else {
			return null;
		} // end if else
	}

	@Override
	public MappingResult<ValueList> mapToModel(
			ValueListPojo pojo,
			ValueList vl) {

	    // return null if the pojo is null
        if(pojo != null) {
            // set the description
            vl.setPtFreeText1(new DescriptionDao(
                    currentProjectId,
                    schema).getPtFreeTextModel(pojo.getDescriptions()));

            // set the name
            vl.setPtFreeText2(new NameDao(
                    currentProjectId,
                    schema).getPtFreeTextModel(pojo.getNames()));

            // return the model as mapping result
            return new MappingResult<ValueList>(vl.getId(), vl);
        } else {
            return null;
        } // end if else
	}

}
