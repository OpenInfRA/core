package de.btu.openinfra.backend.db.daos;

import java.util.Locale;
import java.util.UUID;

import javax.persistence.Query;

import de.btu.openinfra.backend.db.jpa.model.AttributeValueGeomz;
import de.btu.openinfra.backend.db.jpa.model.TopicInstance;
import de.btu.openinfra.backend.db.pojos.AttributeValueGeomType;
import de.btu.openinfra.backend.db.pojos.AttributeValueGeomzPojo;

/**
 * This class represents the AttributeValueGeomz and is used to access the 
 * underlying layer generated by JPA.
 * 
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class AttributeValueGeomzDao 
	extends OpenInfraValueDao<AttributeValueGeomzPojo, AttributeValueGeomz, 
	            TopicInstance> {

	/**
	 * This variable defines the default geometry type. The default type is
	 * used to implement the default read methods {@see OpenInfraDao}.
	 */
	// TODO delete this
	private AttributeValueGeomType defaultGeomType = 
			AttributeValueGeomType.TEXT;
	
	/**
	 * This variable defines the name of the data type which is specified in the 
	 * database.
	 */
	public static final String DATA_TYPE_NAME = "geometry(GeometryZ)";
	
	/**
	 * This is the required constructor which calls the super constructor and in 
	 * turn creates the corresponding entity manager.
	 * 
	 * @param currentProjectId the current project id (this should be null when 
	 *                         the system schema is selected)
	 * @param schema           the required schema
	 */
	public AttributeValueGeomzDao(
			UUID currentProjectId,
			OpenInfraSchemas schema) {
		super(currentProjectId, schema, AttributeValueGeomz.class,
		        TopicInstance.class);
	}
	
	/**
	 * This is the required constructor which calls the super constructor and in 
	 * turn creates the corresponding entity manager.
	 * 
	 * @param currentProjectId the current project id (this should be null when 
	 *                         the system schema is selected)
	 * @param schema           the required schema
	 * @param geomType         the required geom type
	 */
	public AttributeValueGeomzDao(
			UUID currentProjectId,
			OpenInfraSchemas schema,
			AttributeValueGeomType geomType) {
		super(currentProjectId, schema, AttributeValueGeomz.class,
		        TopicInstance.class);
		if(geomType != null) {
			defaultGeomType = geomType;
		} // end if
	}

	@Override
	public AttributeValueGeomzPojo mapToPojo(
			Locale locale,
			AttributeValueGeomz modelObject) {
		String queryString = String.format(
				AttributeValueDao.GEOM_CLAUSE, 
				defaultGeomType.getPsqlFnSignature(),
				"z");
		Query qGeomz = em.createNativeQuery(queryString);
		qGeomz.setParameter(1, modelObject.getId());
		AttributeValueGeomzPojo avgzPojo = 
				new AttributeValueGeomzPojo();
		avgzPojo.setGeom(qGeomz.getResultList().get(0).toString());
		avgzPojo.setGeomType(defaultGeomType);
	    if(modelObject.getTopicInstance() != null) {
	        avgzPojo.setTopicInstanceId(modelObject.getTopicInstance().getId());
	    }
		return avgzPojo;
	}

	@Override
	public MappingResult<AttributeValueGeomz> mapToModel(
			AttributeValueGeomzPojo pojo,
			AttributeValueGeomz avgz) {
		// TODO Auto-generated method stub
		return null;
	}
	
}
