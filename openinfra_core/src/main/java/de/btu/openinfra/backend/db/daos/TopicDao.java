package de.btu.openinfra.backend.db.daos;

import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.UUID;

import de.btu.openinfra.backend.db.OpenInfraSchemas;
import de.btu.openinfra.backend.db.pojos.AttributeTypeGroupToTopicCharacteristicPojo;
import de.btu.openinfra.backend.db.pojos.AttributeTypeGroupToValues;
import de.btu.openinfra.backend.db.pojos.AttributeTypeToAttributeTypeGroupPojo;
import de.btu.openinfra.backend.db.pojos.AttributeTypeToValue;
import de.btu.openinfra.backend.db.pojos.TopicPojo;
import de.btu.openinfra.backend.db.pojos.project.AttributeValuePojo;

/**
 * This class represents a TopicInstance and is used to access the underlying 
 * layer generated by JPA. The Topic object, in contrast to the ordinary 
 * TopicInstance object, provides more information including attribute type
 * groups, attribute types, and the associated attribute values.
 * 
 * This class is a very specific DAO class since it doesn't extend the OpenInfRA
 * DAO class. Thus, this class doesn't provide its own entity manager.
 * 
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class TopicDao {
	
	/**
	 * The UUID of the current project.
	 */
	private UUID currentProjectId;
	/**
	 * The currently used schema.
	 */
	private OpenInfraSchemas schema;
	
	/**
	 * This is the default constructor.
	 * 
	 * @param currentProjectId the current project id
	 * @param schema           the current schema
	 */
	public TopicDao(UUID currentProjectId, OpenInfraSchemas schema) {
		this.currentProjectId = currentProjectId;
		this.schema = schema;
	}
	
	/**
	 * This method reads a specific topic instance.
	 * 
	 * @param locale          A Java.util locale object.
	 * @param topicInstanceId the id of the required topic instance
	 * @param geomType        the geom type
	 * @return                a topic object
	 */
	public TopicPojo read(
			Locale locale, 
			UUID topicInstanceId, 
			AttributeValueGeomType geomType) {
		
		// 1. Define the topic object
		TopicPojo topic = new TopicPojo();
		List<AttributeTypeGroupToValues> atgValueList = 
				new LinkedList<AttributeTypeGroupToValues>();
		
		// 2. Set the corresponding topic instance
		topic.setTopicInstance(new TopicInstanceDao(
				currentProjectId, 
				schema).read(locale, topicInstanceId));

		// 3. Retrieve a list of corresponding attribute type groups 
		List<AttributeTypeGroupToTopicCharacteristicPojo> atgList = null;
		atgList = new AttributeTypeGroupToTopicCharacteristicDao(
				currentProjectId, 
				schema).read(
						locale, 
						topic.getTopicInstance()
							.getTopicCharacteristic().getUuid(),
						0, 
						Integer.MAX_VALUE);
		
		// 4 Get all attribute values belonging to this topic instance
		List<AttributeValuePojo> values = new AttributeValueDao(
				currentProjectId, schema, geomType).read(
						locale, 
						topicInstanceId, 
						0, 
						Integer.MAX_VALUE);
		
		// 5. Iterate over all attribute type groups
		for(AttributeTypeGroupToTopicCharacteristicPojo atg : atgList) {
			// 5.a Create the corresponding container and set the content
			AttributeTypeGroupToValues atgValue = 
					new AttributeTypeGroupToValues();
			atgValue.setAttributeTypeGroup(atg.getAttributeTypeGroup());
			
			// 5.b Retrieve all attribute types belonging to this group
			List<AttributeTypeToAttributeTypeGroupPojo> atList =
					new AttributeTypeToAttributeTypeGroupDao(
							currentProjectId, 
							schema).read(
									locale, 
									atgValue.getAttributeTypeGroup().getUuid(), 
									0, 
									Integer.MAX_VALUE);

			// 5.c Create a map (ADT) and put the attribute type and the
			//     corresponding attribute value (or a null value) into one 
			//     bucket
			List<AttributeTypeToValue> map = 
					new LinkedList<AttributeTypeToValue>();

			for(AttributeTypeToAttributeTypeGroupPojo at : atList) {
				AttributeValuePojo hValue = null;
				for(AttributeValuePojo value : values) {
					// add the value to the list of attribute types when the
					// ids of both are equal
					if(value.getAttributeTypeId().equals(
							at.getAttributeType().getUuid())) {
						hValue = value;
						break;
					} // end if break if corresponding value has been found
				} // end for
				map.add(new AttributeTypeToValue(
						at.getAttributeType(), 
						hValue));
			} // end for
			atgValue.setAttributeTypesToValues(map);
			atgValueList.add(atgValue);
		} // end for

		topic.setAttributeTypeGroupsToValues(atgValueList);
		return topic;
	}

}
