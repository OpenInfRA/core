package de.btu.openinfra.backend.db.daos.meta;

import java.util.Locale;
import java.util.UUID;

import de.btu.openinfra.backend.OpenInfraTime;
import de.btu.openinfra.backend.db.MappingResult;
import de.btu.openinfra.backend.db.OpenInfraSchemas;
import de.btu.openinfra.backend.db.daos.OpenInfraDao;
import de.btu.openinfra.backend.db.jpa.model.meta.Log;
import de.btu.openinfra.backend.db.pojos.meta.LogPojo;
import de.btu.openinfra.backend.exception.OpenInfraEntityException;
import de.btu.openinfra.backend.exception.OpenInfraExceptionTypes;

/**
 * This class represents the Log and is used to access the underlying layer
 * generated by JPA.
 *
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class LogDao
    extends OpenInfraDao<LogPojo, Log> {

    /**
     * This is the required constructor which calls the super constructor and in
     * turn creates the corresponding entity manager.
     * @param currentProjectId The identifier of the current project.
     * @param schema           the required schema
     */
    public LogDao(UUID currentProjectId, OpenInfraSchemas schema) {
        super(null, OpenInfraSchemas.META_DATA, Log.class);
    }

    @Override
    public LogPojo mapToPojo(Locale locale, Log l) {
        return mapToPojoStatically(l);
    }

    /**
     * This method implements the method mapToPojo in a static way.
     *
     * @param at     the model object
     * @return       the POJO object when the model object is not null else null
     */
    public static LogPojo mapToPojoStatically(Log l) {
        if(l != null) {
            LogPojo pojo = new LogPojo(l);
            pojo.setUserId(l.getUserId());
            pojo.setUserName(l.getUserName());
            pojo.setCreatedOn(OpenInfraTime.format(l.getCreatedOn()));
            pojo.setLogger(LoggerDao.mapToPojoStatically(l.getLoggerBean()));
            pojo.setLevel(LevelDao.mapToPojoStatically(l.getLevelBean()));
            pojo.setMessage(l.getMessage());
            return pojo;
        } else {
            return null;
        }
    }

    @Override
    public MappingResult<Log> mapToModel(LogPojo pojo, Log log) {
        if(pojo != null) {
            mapToModelStatically(pojo, log);
            return new MappingResult<Log>(log.getId(), log);
        }
        else {
            return null;
        }
    }

    /**
     * This method implements the method mapToModel in a static way.
     * @param pojo the POJO object
     * @param log the pre initialized model object
     * @return return a corresponding JPA model object
     * @throws OpenInfraEntityException
     */
    public Log mapToModelStatically(LogPojo pojo, Log log) {
        Log resultLog = null;
        try {
            resultLog = log;
            if(resultLog == null) {
                resultLog = new Log();
                resultLog.setId(pojo.getUuid());
            }
            resultLog.setCreatedOn(OpenInfraTime.now());
            resultLog.setMessage(pojo.getMessage());
            resultLog.setUserId(pojo.getUserId());
            resultLog.setUserName(pojo.getUserName());
            resultLog.setLevelBean(LevelDao.mapToModelStatically(
                    pojo.getLevel(),
                    null));
            resultLog.setLoggerBean(LoggerDao.mapToModelStatically(
                    pojo.getLogger(),
                    null));
        } catch (NullPointerException npe) {
            throw new OpenInfraEntityException(
                    OpenInfraExceptionTypes.MISSING_DATA_IN_POJO);
        }
        return resultLog;
    }
}
