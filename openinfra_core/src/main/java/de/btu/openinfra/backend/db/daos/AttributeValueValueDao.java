package de.btu.openinfra.backend.db.daos;

import java.util.Locale;
import java.util.UUID;

import de.btu.openinfra.backend.db.MappingResult;
import de.btu.openinfra.backend.db.OpenInfraSchemas;
import de.btu.openinfra.backend.db.jpa.model.AttributeTypeToAttributeTypeGroup;
import de.btu.openinfra.backend.db.jpa.model.AttributeValueValue;
import de.btu.openinfra.backend.db.jpa.model.TopicInstance;
import de.btu.openinfra.backend.db.pojos.AttributeValueValuePojo;

/**
 * This class represents the AttributeType and is used to access the underlying
 * layer generated by JPA.
 *
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class AttributeValueValueDao
	extends OpenInfraDao<AttributeValueValuePojo, AttributeValueValue> {

	/**
	 * This is the required constructor which calls the super constructor and in
	 * turn creates the corresponding entity manager.
	 *
	 * @param currentProjectId the current project id (this should be null when
	 *                         the system schema is selected)
	 * @param schema           the required schema
	 */
	public AttributeValueValueDao(UUID currentProjectId,
			OpenInfraSchemas schema) {
		super(currentProjectId, schema, AttributeValueValue.class);
	}

	@Override
	public AttributeValueValuePojo mapToPojo(
			Locale locale,
			AttributeValueValue avv) {
		return mapToPojoStatically(locale, avv,
		        new MetaDataDao(currentProjectId, schema));
	}

	/**
	 * This method implements the method mapToPojo in a static way.
	 *
	 * @param locale the requested language as Java.util locale
	 * @param avv    the model object
	 * @param mdDao  the meta data DAO
	 * @return       the POJO object when the model object is not null else null
	 */
	public static AttributeValueValuePojo mapToPojoStatically(
			Locale locale,
			AttributeValueValue avv,
			MetaDataDao mdDao) {
	    if (avv != null) {
    		AttributeValueValuePojo pojo = new AttributeValueValuePojo();

    		// set meta data if exists
            try {
                pojo.setMetaData(mdDao.read(avv.getId()).getData());
            } catch (NullPointerException npe) { /* do nothing */ }

    		// set the topic instance id
    		pojo.setTopicInstanceId(avv.getTopicInstance().getId());
    		// set the value of the object
    		pojo.setValue(PtFreeTextDao.mapToPojoStatically(
    				locale,
    				avv.getPtFreeText()));
    		// set the attribute type to attribute type group id of the value
    		pojo.setAttributeTypeToAttributeTypeGroupId(
    		        avv.getAttributeTypeToAttributeTypeGroup().getId());
    		// set the id of the object
    		pojo.setUuid(avv.getId());
    		pojo.setTrid(avv.getXmin());

    		return pojo;
	    } else {
	        return null;
	    }
	}

	@Override
	public MappingResult<AttributeValueValue> mapToModel(
			AttributeValueValuePojo pojo,
			AttributeValueValue avv) {

        // in case the attribute type to attribute type group id, the
        // topic instance id or the value is null
        if (pojo.getAttributeTypeToAttributeTypeGroupId() == null ||
                pojo.getValue() == null) {
            return null;
        }

        // in case the value is an empty string
        if (pojo.getValue().getLocalizedStrings().get(0)
                .getCharacterString().equals("")) {
            return null;
        }

        // set the textual information
        PtFreeTextDao ptfDao = new PtFreeTextDao(currentProjectId, schema);
        avv.setPtFreeText(ptfDao.getPtFreeTextModel(pojo.getValue()));

        // set the attribute type to attribute type group
        avv.setAttributeTypeToAttributeTypeGroup(em.find(
                AttributeTypeToAttributeTypeGroup.class,
                pojo.getAttributeTypeToAttributeTypeGroupId()));

        // set the topic instance
        avv.setTopicInstance(
                em.find(TopicInstance.class, pojo.getTopicInstanceId()));

        return new MappingResult<AttributeValueValue>(avv.getId(), avv);
	}

}
