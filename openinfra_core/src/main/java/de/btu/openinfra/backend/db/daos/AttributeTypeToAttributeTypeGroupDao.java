package de.btu.openinfra.backend.db.daos;

import java.util.Locale;
import java.util.UUID;

import de.btu.openinfra.backend.db.MappingResult;
import de.btu.openinfra.backend.db.OpenInfraSchemas;
import de.btu.openinfra.backend.db.jpa.model.AttributeType;
import de.btu.openinfra.backend.db.jpa.model.AttributeTypeGroup;
import de.btu.openinfra.backend.db.jpa.model.AttributeTypeGroupToTopicCharacteristic;
import de.btu.openinfra.backend.db.jpa.model.AttributeTypeToAttributeTypeGroup;
import de.btu.openinfra.backend.db.jpa.model.Multiplicity;
import de.btu.openinfra.backend.db.jpa.model.ValueListValue;
import de.btu.openinfra.backend.db.pojos.AttributeTypeToAttributeTypeGroupPojo;
import de.btu.openinfra.backend.exception.OpenInfraEntityException;
import de.btu.openinfra.backend.exception.OpenInfraExceptionTypes;

/**
 * This class represents the AttributeTypeToAttributeTypeGroup and is used to
 * access the underlying layer generated by JPA.
 *
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class AttributeTypeToAttributeTypeGroupDao extends
	OpenInfraValueValueDao<AttributeTypeToAttributeTypeGroupPojo,
	AttributeTypeToAttributeTypeGroup, AttributeTypeGroup, AttributeType> {

	/**
	 * This is the required constructor which calls the super constructor and in
	 * turn creates the corresponding entity manager.
	 *
	 * @param currentProjectId the current project id (this should be null when
	 *                         the system schema is selected)
	 * @param schema           the required schema
	 */
	public AttributeTypeToAttributeTypeGroupDao(
			UUID currentProjectId,
			OpenInfraSchemas schema) {
		super(currentProjectId,
			  schema,
			  AttributeTypeToAttributeTypeGroup.class,
			  AttributeTypeGroup.class,
			  AttributeType.class);
	}

	@Override
	public AttributeTypeToAttributeTypeGroupPojo mapToPojo(
			Locale locale,
			AttributeTypeToAttributeTypeGroup attatg) {
		AttributeTypeToAttributeTypeGroupPojo pojo =
				new AttributeTypeToAttributeTypeGroupPojo(attatg);

		pojo.setAttributeType(new AttributeTypeDao(
		        currentProjectId,
		        schema).mapToPojo(
		                locale,
		                attatg.getAttributeType()));
		pojo.setAttributeTypeGroupId(attatg.getId());
		pojo.setDefaultValue(new ValueListValueDao(
		        currentProjectId,
		        schema).mapToPojo(
		                locale,
		                attatg.getValueListValue()));
		pojo.setMultiplicity(new MultiplicityDao(
		        currentProjectId,
		        schema).mapToPojo(
		                locale,
		                attatg.getMultiplicityBean()));
		pojo.setOrder(attatg.getOrder());
		return pojo;
	}

	@Override
	public MappingResult<AttributeTypeToAttributeTypeGroup> mapToModel(
			AttributeTypeToAttributeTypeGroupPojo pojo,
			AttributeTypeToAttributeTypeGroup atg) {

	    try {
            // set the attribute type
            atg.setAttributeType(em.find(
                    AttributeType.class,
                    pojo.getAttributeType().getUuid()));

            // set the attribute type group
            atg.setAttributeTypeGroup(em.find(
                    AttributeTypeGroup.class,
                    pojo.getAttributeTypeGroupId()));

            // set the attribute type group to topic characteristic
            atg.setAttributeTypeGroupToTopicCharacteristic(em.find(
                    AttributeTypeGroupToTopicCharacteristic.class,
                    pojo.getAttributeTypeGroupToTopicCharacteristicId()));

            // set the multiplicity
            atg.setMultiplicityBean(em.find(
                    Multiplicity.class,
                    pojo.getMultiplicity().getUuid()));
        } catch (NullPointerException npe) {
            throw new OpenInfraEntityException(
                    OpenInfraExceptionTypes.MISSING_NAME_IN_POJO);
        }

        // set the default value (optional)
        if(pojo.getDefaultValue() != null) {
            atg.setValueListValue(em.find(ValueListValue.class,
                    pojo.getDefaultValue().getUuid()));
        }

        // set the order (optional)
        atg.setOrder(pojo.getOrder());

        // return the model as mapping result
        return new MappingResult<AttributeTypeToAttributeTypeGroup>(
                atg.getId(), atg);
	}

}
