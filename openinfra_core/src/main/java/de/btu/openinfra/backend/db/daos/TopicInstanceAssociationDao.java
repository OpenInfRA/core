package de.btu.openinfra.backend.db.daos;

import java.util.Locale;
import java.util.UUID;

import de.btu.openinfra.backend.db.MappingResult;
import de.btu.openinfra.backend.db.OpenInfraSchemas;
import de.btu.openinfra.backend.db.jpa.model.TopicInstance;
import de.btu.openinfra.backend.db.jpa.model.TopicInstanceXTopicInstance;
import de.btu.openinfra.backend.db.pojos.project.TopicInstanceAssociationPojo;

/**
 * This class represents the TopicInstanceAssociation and is used to access the
 * underlying layer generated by JPA.
 *
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class TopicInstanceAssociationDao extends OpenInfraValueValueDao<
	TopicInstanceAssociationPojo,
	TopicInstanceXTopicInstance,
	TopicInstance, TopicInstance> {

	/**
	 * This is the required constructor which calls the super constructor and
	 * in turn creates the corresponding entity manager.
	 *
	 * @param currentProjectId the current project id (this should be null when
	 *                         the system schema is selected)
	 * @param schema           the required schema
	 */
	public TopicInstanceAssociationDao(
			UUID currentProjectId,
			OpenInfraSchemas schema) {
		super(
				currentProjectId,
				schema,
				TopicInstanceXTopicInstance.class,
				TopicInstance.class, TopicInstance.class);
	}

//	public List<TopicCharacteristicPojo> readTopicCharacteristics() {
//
//	}

	@Override
	public TopicInstanceAssociationPojo mapToPojo(
			Locale locale,
			TopicInstanceXTopicInstance txt) {
	    if (txt != null) {
	        MetaDataDao mdDao = new MetaDataDao(currentProjectId, schema);
	        TopicInstanceAssociationPojo pojo =
	                new TopicInstanceAssociationPojo(txt, mdDao);

	        pojo.setRelationshipType(
	                RelationshipTypeDao.mapToPojoStatically(
	                        locale,
	                        txt.getRelationshipType(),
	                        mdDao));
	        pojo.setAssociatedInstance(
	                new TopicInstanceDao(currentProjectId, schema).mapToPojo(
	                        locale,
	                        txt.getTopicInstance2Bean()));
            return pojo;
        } else {
            return null;
        }
	    /*
	    return mapToPojoStatically(locale, txt,
                new MetaDataDao(currentProjectId, schema));
                */
	}

	/**
     * This method implements the method mapToPojo in a static way.
     *
     * @param locale the requested language as Java.util locale
     * @param txt    the model object
     * @param mdDao  The meta data DAO must not be null.
     * @return       the POJO object when the model object is not null else null
     */
    public static TopicInstanceAssociationPojo mapToPojoStatically(
            Locale locale,
            TopicInstanceXTopicInstance txt,
            MetaDataDao mdDao) {
        if (txt != null) {
            TopicInstanceAssociationPojo pojo =
                    new TopicInstanceAssociationPojo(txt, mdDao);
            pojo.setAssociationInstanceId(txt.getTopicInstance1Bean().getId());
            pojo.setRelationshipType(
                    RelationshipTypeDao.mapToPojoStatically(
                            locale,
                            txt.getRelationshipType(),
                            mdDao));
            pojo.setAssociatedInstance(
                    TopicInstanceDao.mapToPojoStatically(
                            locale,
                            txt.getTopicInstance2Bean(),
                            mdDao));
            return pojo;
        } else {
            return null;
        }
    }

	@Override
	public MappingResult<TopicInstanceXTopicInstance> mapToModel(
			TopicInstanceAssociationPojo pojo,
			TopicInstanceXTopicInstance txt) {

        // TODO set the model values

        // return the model as mapping result
        return new MappingResult<TopicInstanceXTopicInstance>(
                txt.getId(), txt);
	}

}
