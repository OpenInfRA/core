package de.btu.openinfra.backend.db.daos;

import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.UUID;

import de.btu.openinfra.backend.db.MappingResult;
import de.btu.openinfra.backend.db.OpenInfraSchemas;
import de.btu.openinfra.backend.db.jpa.model.TopicCharacteristic;
import de.btu.openinfra.backend.db.jpa.model.TopicInstance;
import de.btu.openinfra.backend.db.jpa.model.TopicInstanceXTopicInstance;
import de.btu.openinfra.backend.db.pojos.project.TopicInstanceAssociationPojo;

/**
 * This class represents the TopicInstanceAssociation and is used to access the
 * underlying layer generated by JPA.
 *
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class TopicInstanceAssociationDao extends OpenInfraValueValueDao<
	TopicInstanceAssociationPojo,
	TopicInstanceXTopicInstance,
	TopicInstance, TopicInstance> {

	/**
	 * This is the required constructor which calls the super constructor and
	 * in turn creates the corresponding entity manager.
	 *
	 * @param currentProjectId the current project id (this should be null when
	 *                         the system schema is selected)
	 * @param schema           the required schema
	 */
	public TopicInstanceAssociationDao(
			UUID currentProjectId,
			OpenInfraSchemas schema) {
		super(
				currentProjectId,
				schema,
				TopicInstanceXTopicInstance.class,
				TopicInstance.class, TopicInstance.class);
	}

	@Override
	public TopicInstanceAssociationPojo mapToPojo(
			Locale locale,
			TopicInstanceXTopicInstance txt) {
        if (txt != null) {
            TopicInstanceAssociationPojo pojo =
                    new TopicInstanceAssociationPojo(txt);
            pojo.setAssociationInstanceId(txt.getTopicInstance1Bean().getId());
            pojo.setRelationshipType(
                    new RelationshipTypeDao(currentProjectId, schema).mapToPojo(
                            locale,
                            txt.getRelationshipType()));
            pojo.setAssociatedInstance(
                    new TopicInstanceDao(currentProjectId, schema).mapToPojo(
                            locale,
                            txt.getTopicInstance2Bean()));
            return pojo;
        } else {
            return null;
        }
    }

    public List<TopicInstanceAssociationPojo> readAssociationToByTopchar(
    		Locale locale, UUID topicInstance, UUID topChar,
    		int offset, int size) {
    	return readAssociation(locale, topicInstance, topChar,
    			"TopicInstanceXTopicInstance"
    			+ ".findAssociationToByTopicInstanceAndTopicCharacteristic",
    			offset, size);
    }

    public List<TopicInstanceAssociationPojo> readAssociationFromByTopchar(
    		Locale locale, UUID topicInstance, UUID topChar,
    		int offset, int size) {
    	return readAssociation(locale, topicInstance, topChar,
    			"TopicInstanceXTopicInstance"
    			+ ".findAssociationFromByTopicInstanceAndTopicCharacteristic",
    			offset, size);
    }

    public List<TopicInstanceAssociationPojo> readAssociation(
    		Locale locale, UUID topicInstance, UUID topChar, String queryName,
    		int offset, int size) {
    	List<TopicInstanceXTopicInstance> tixtiList = em.createNamedQuery(
    			queryName, TopicInstanceXTopicInstance.class)
    			.setParameter("topicInstance",
    					em.find(TopicInstance.class, topicInstance))
    			.setParameter("topicCharacteristic",
    					em.find(TopicCharacteristic.class, topChar))
    			.setFirstResult(offset).setMaxResults(size).getResultList();
    	List<TopicInstanceAssociationPojo> pojoList =
    			new LinkedList<TopicInstanceAssociationPojo>();
    	for(TopicInstanceXTopicInstance tixti : tixtiList) {
    		pojoList.add(mapToPojo(locale, tixti));
    	}
    	return pojoList;
    }

	@Override
	public MappingResult<TopicInstanceXTopicInstance> mapToModel(
			TopicInstanceAssociationPojo pojo,
			TopicInstanceXTopicInstance txt) {

        // TODO set the model values

        // return the model as mapping result
        return new MappingResult<TopicInstanceXTopicInstance>(
                txt.getId(), txt);
	}

}
