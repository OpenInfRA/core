package de.btu.openinfra.backend.db.daos.meta;

import java.util.Locale;

import de.btu.openinfra.backend.db.MappingResult;
import de.btu.openinfra.backend.db.OpenInfraSchemas;
import de.btu.openinfra.backend.db.daos.OpenInfraDao;
import de.btu.openinfra.backend.db.jpa.model.meta.Servers;
import de.btu.openinfra.backend.db.pojos.meta.ServersPojo;

/**
 * This class represents the Servers and is used to access the underlying layer
 * generated by JPA.
 *
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class ServersDao
    extends OpenInfraDao<ServersPojo, Servers> {

    /**
     * This is the required constructor which calls the super constructor and in
     * turn creates the corresponding entity manager.
     *
     * @param schema           the required schema
     */
    public ServersDao(OpenInfraSchemas schema) {
        super(null, schema, Servers.class);
    }

    @Override
    public ServersPojo mapToPojo(Locale locale, Servers s) {
        return mapPojoStatically(s);
    }

    /**
     * This method implements the method mapToPojo in a static way.
     *
     * @param at     the model object
     * @return       the POJO object when the model object is not null else null
     */
    public static ServersPojo mapPojoStatically(Servers s) {
        if (s != null) {
            ServersPojo pojo = new ServersPojo(s);
            pojo.setServer(s.getServer());
            return pojo;
        } else {
            return null;
        }
    }

    @Override
    public MappingResult<Servers> mapToModel(ServersPojo pojo, Servers s) {
        if(pojo != null) {
            mapToModelStatically(pojo, s);
            return new MappingResult<Servers>(s.getId(), s);
        }
        else {
            return null;
        }
    }

    /**
     * This method implements the method mapToModel in a static way.
     * @param pojo the POJO object
     * @param s the pre initialized model object
     * @return return a corresponding JPA model object or null if the pojo
     * object is null
     */
    public static Servers mapToModelStatically(ServersPojo pojo, Servers s) {
        Servers resultServers = null;
        if(pojo != null) {
            resultServers = s;
            if(resultServers == null) {
                resultServers = new Servers();
                resultServers.setId(pojo.getUuid());
            }
            resultServers.setServer(pojo.getServer());
        }
        return resultServers;
    }

    /**
     * Creates an empty servers pojo.
     * @return an empty servers pojo
     */
    public ServersPojo newServers() {
       return newPojoStatically();
    }

    /**
     * This method implements the method newServers in a static way.
     * @return an empty servers pojo
     */
    public static ServersPojo newPojoStatically() {
        return new ServersPojo();
    }
}
