package de.btu.openinfra.backend.db.pojos.solr;

import javax.xml.bind.annotation.XmlRootElement;

import de.btu.openinfra.backend.db.pojos.OpenInfraPojo;
import de.btu.openinfra.backend.enums.LogicOperatorEnum;
import de.btu.openinfra.backend.enums.MandatoryEnum;
import de.btu.openinfra.backend.enums.RelationalOperatorEnum;

/**
 * This POJO is a container for a part of the complex search query that is
 * generated by the extended search.
 *
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
@XmlRootElement
public class SolrComplexQueryPartPojo extends OpenInfraPojo {

    /*
     * Mandatory defines if the part must be part of the result or not. This
     * property is optional.
     */
    private MandatoryEnum mandatory;

    /*
     * The attribute type will be used as the field name in the Solr index. This
     * property is optional.
     */
    private String attributeType;

    /*
     * The relational operator defines the relation between the attribute type
     * and the attribute value. This property is optional. Default is EQUAL.
     */
    private RelationalOperatorEnum relationalOperator;

    /*
     * The attribute value is the value of the field in the Solr index. This
     * property is mandatory. If this field is null the search request will be
     * aborted.
     */
    private String attributeValue;

    /*
     * The attribute value is as additional value of the field in the Solr
     * index. This property is only mandatory if the relational operator is
     * BETWEEN. This means we want to execute a range query. Else it will be
     * ignored.
     */
    private String tillAttributeValue;

    /*
     * The logic operator defines the relation of a query part to the direct
     * previous query part. It will be ignored for the first part. This property
     * is optional. Default is a whitespace that has the same meaning as OR.
     */
    private LogicOperatorEnum logicOperator;

    /*
     * The relevance defines the relevance of the query part in the whole query.
     * This property is optional.
     */
    private float relevance;

    /*
     * The fuzziness defines a fuzzy search based on the Levenshtein Distance.
     * It will not support any parameter and use the default value of 0.5. This
     * property is optional. Default FALSE.
     */
    private boolean fuzziness;


    public MandatoryEnum getMandatory() {
        return mandatory;
    }

    public void setMandatory(MandatoryEnum mandatory) {
        this.mandatory = mandatory;
    }

    public String getAttributeType() {
        return attributeType;
    }

    public void setAttributeType(String attributeType) {
        this.attributeType = attributeType;
    }

    public RelationalOperatorEnum getRelationalOperator() {
        return relationalOperator;
    }

    public void setRelationalOperator(RelationalOperatorEnum relationalOperator) {
        this.relationalOperator = relationalOperator;
    }

    public String getAttributeValue() {
        return attributeValue;
    }

    public void setAttributeValue(String attributeValue) {
        this.attributeValue = attributeValue;
    }

    public String getTillAttributeValue() {
        return tillAttributeValue;
    }

    public void setTillAttributeValue(String tillAttributeValue) {
        this.tillAttributeValue = tillAttributeValue;
    }

    public LogicOperatorEnum getLogicOperator() {
        return logicOperator;
    }

    public void setLogicOperator(LogicOperatorEnum logicOperator) {
        this.logicOperator = logicOperator;
    }

    public float getRelevance() {
        return relevance;
    }

    public void setRelevance(float relevance) {
        this.relevance = relevance;
    }

    public boolean isFuzziness() {
        return fuzziness;
    }

    public void setFuzziness(boolean fuzziness) {
        this.fuzziness = fuzziness;
    }
}
