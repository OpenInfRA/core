package de.btu.openinfra.backend.db.daos;

import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.UUID;

import de.btu.openinfra.backend.OpenInfraProperties;
import de.btu.openinfra.backend.db.OpenInfraSchemas;
import de.btu.openinfra.backend.db.pojos.TopicGeomzPojo;
import de.btu.openinfra.backend.db.pojos.TopicInstancePojo;

/**
 * This class represents a TopicInstance and is used to access the underlying 
 * layer generated by JPA. The TopicGeomz object, in contrast to the ordinary 
 * TopicInstance object, provides additional informations for 3D geometry data
 * that is gained from the AttributeValueGeomz object.
 * 
 * This class is a very specific DAO class since it doesn't extend the OpenInfRA
 * DAO class. Thus, this class doesn't provide its own entity manager.
 * 
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 * 
 */
public class TopicGeomzDao {
    
    /**
     * The UUID of the current project.
     */
    private UUID currentProjectId;
    /**
     * The currently used schema.
     */
    private OpenInfraSchemas schema;
    /**
     * The used 3D geometry type.
     */
    private AttributeValueGeomType geomType;
    
    /**
     * The default constructor.
     */
    public TopicGeomzDao(UUID currentProjectId, OpenInfraSchemas schema,
            AttributeValueGeomType geomType) {
        this.currentProjectId = currentProjectId;
        this.schema = schema;
        this.geomType = geomType;
    }
    
    /**
     * This method reads a special topic instance that contains 3D geometry data
     * only.
     * 
     * @param locale                A Java.util locale object.
     * @param topicCharacteristicId The topic characteristic id the topic
     *                              belongs to
     * @param offset                the number where to start
     * @param size                  the size of items to provide
     * @return                      a topic object
     */
    public List<TopicGeomzPojo> read(
            Locale locale,
            UUID topicCharacteristicId,
            int offset,
            int size) {
        
        // limit size to a configurable max size
        // Define the specific parameters when not specified correctly
        if(size == 0 || size > OpenInfraProperties.MAX_SIZE) {
            size = OpenInfraProperties.MAX_SIZE;
        } // end if
        
        // get TopicInstanceId list for the TopicCharacteristicId that have a
        // 3D attribute values
        List<TopicInstancePojo> tiPList = new TopicInstanceDao(
                    currentProjectId,
                    schema).readWithGeomz(
                            locale,
                            topicCharacteristicId,
                            offset,
                            size);
        
        // create a TopicPojo list
        List<TopicGeomzPojo> tpl = new LinkedList<TopicGeomzPojo>();
        
        // get TopicInstancePojos for every TopicInstanceId
        for (TopicInstancePojo tiP : tiPList) {
            // create a TopicPojo
            TopicGeomzPojo tP = new TopicGeomzPojo();
            
            // set the TopicInstancePojo
            tP.setTopicInstanceId(tiP.getUuid());
            // set the AttributeValuesGeomzPojo
            tP.setAttributeValuesGeomz(
                    new AttributeValueGeomzDao(
                            currentProjectId,
                            schema,
                            geomType).read(
                                    locale,
                                    tiP.getUuid(),
                                    offset,
                                    size));
            // add the TopicInstancePojo to the TopicPojo list
            tpl.add(tP);
        }
        
        // return the TopicPojo list
        return tpl;
    }
    
    /**
     * This method returns the count of Topic Characteristic objects that
     * contains a 3D geometry.
     * 
     * @param topicCharacteristicId the Topic Characteristic Id
     * @return                      the count of objects
     */
    public Long getCount(UUID topicCharacteristicId) {
        return new TopicInstanceDao(
                currentProjectId,
                OpenInfraSchemas.PROJECTS)
                    .getCountWithGeomz(topicCharacteristicId);
    }
}