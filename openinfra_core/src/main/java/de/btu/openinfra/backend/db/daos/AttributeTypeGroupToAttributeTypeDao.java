package de.btu.openinfra.backend.db.daos;

import java.util.Locale;
import java.util.UUID;

import de.btu.openinfra.backend.db.MappingResult;
import de.btu.openinfra.backend.db.OpenInfraSchemas;
import de.btu.openinfra.backend.db.jpa.model.AttributeType;
import de.btu.openinfra.backend.db.jpa.model.AttributeTypeGroup;
import de.btu.openinfra.backend.db.jpa.model.AttributeTypeGroupToTopicCharacteristic;
import de.btu.openinfra.backend.db.jpa.model.AttributeTypeToAttributeTypeGroup;
import de.btu.openinfra.backend.db.jpa.model.Multiplicity;
import de.btu.openinfra.backend.db.jpa.model.ValueListValue;
import de.btu.openinfra.backend.db.pojos.AttributeTypeGroupToAttributeTypePojo;
import de.btu.openinfra.backend.exception.OpenInfraEntityException;
import de.btu.openinfra.backend.exception.OpenInfraExceptionTypes;

/**
 * This class represents the AttributeTypeGroupToAttributeType and is used to
 * access the underlying layer generated by JPA.
 *
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class AttributeTypeGroupToAttributeTypeDao extends
	OpenInfraValueValueDao<AttributeTypeGroupToAttributeTypePojo,
	AttributeTypeToAttributeTypeGroup, AttributeType, AttributeTypeGroup> {

	/**
	 * This is the required constructor which calls the super constructor and in
	 * turn creates the corresponding entity manager.
	 *
	 * @param currentProjectId the current project id (this should be null when
	 *                         the system schema is selected)
	 * @param schema           the required schema
	 */
	public AttributeTypeGroupToAttributeTypeDao(
			UUID currentProjectId,
			OpenInfraSchemas schema) {
		super(currentProjectId,
				schema,
				AttributeTypeToAttributeTypeGroup.class,
				AttributeType.class,
				AttributeTypeGroup.class);
	}

	@Override
	public AttributeTypeGroupToAttributeTypePojo mapToPojo(
			Locale locale,
			AttributeTypeToAttributeTypeGroup atgtat) {
        if(atgtat != null) {
            AttributeTypeGroupToAttributeTypePojo pojo =
                    new AttributeTypeGroupToAttributeTypePojo(atgtat);

            pojo.setAttributeTypeId(atgtat.getAttributeType().getId());
            pojo.setAttributeTypeGroupToTopicCharacteristicId(
            		atgtat.getAttributeTypeGroupToTopicCharacteristic()
            		.getId());
            pojo.setAttributeTypeGroup(new AttributeTypeGroupDao(
                    currentProjectId,
                    schema).mapToPojo(
                            locale,
                            atgtat.getAttributeTypeGroup()));
            pojo.setDefaultValue(new ValueListValueDao(
                    currentProjectId,
                    schema).mapToPojo(
                            locale,
                            atgtat.getValueListValue()));
            pojo.setMultiplicity(new MultiplicityDao(
                    currentProjectId,
                    schema).mapToPojo(
                            locale,
                            atgtat.getMultiplicityBean()));
            pojo.setOrder(atgtat.getOrder());
            return pojo;
        } else {
            return null;
        } // end if else
    }

	@Override
	public MappingResult<AttributeTypeToAttributeTypeGroup> mapToModel(
			AttributeTypeGroupToAttributeTypePojo pojo,
			AttributeTypeToAttributeTypeGroup atg) {

	    try {
	        // set the attribute type
	        atg.setAttributeType(em.find(
	                AttributeType.class,
	                pojo.getAttributeTypeId()));

	        // set the attribute type group
	        atg.setAttributeTypeGroup(em.find(
	                AttributeTypeGroup.class,
	                pojo.getAttributeTypeGroup().getUuid()));

	        // set the attribute type group to topic characteristic
	        atg.setAttributeTypeGroupToTopicCharacteristic(em.find(
	                AttributeTypeGroupToTopicCharacteristic.class,
	                pojo.getAttributeTypeGroupToTopicCharacteristicId()));

	        // set the multiplicity
	        atg.setMultiplicityBean(em.find(
	                Multiplicity.class,
	                pojo.getMultiplicity().getUuid()));
	    } catch (NullPointerException npe) {
            throw new OpenInfraEntityException(
                    OpenInfraExceptionTypes.MISSING_NAME_IN_POJO);
        }

	    // set the default value (optional)
        if(pojo.getDefaultValue() != null) {
            atg.setValueListValue(em.find(ValueListValue.class,
                    pojo.getDefaultValue().getUuid()));
        }

		// set the order (optional)
		atg.setOrder(pojo.getOrder());

        // return the model as mapping result
        return new MappingResult<AttributeTypeToAttributeTypeGroup>(
                atg.getId(), atg);
	}

}
