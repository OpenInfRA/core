package de.btu.openinfra.backend.db.daos;

import java.util.Locale;
import java.util.UUID;

import de.btu.openinfra.backend.db.MappingResult;
import de.btu.openinfra.backend.db.OpenInfraSchemas;
import de.btu.openinfra.backend.db.jpa.model.AttributeType;
import de.btu.openinfra.backend.db.jpa.model.AttributeTypeGroup;
import de.btu.openinfra.backend.db.jpa.model.AttributeTypeToAttributeTypeGroup;
import de.btu.openinfra.backend.db.pojos.AttributeTypeGroupToAttributeTypePojo;

/**
 * This class represents the AttributeTypeGroupToAttributeType and is used to
 * access the underlying layer generated by JPA.
 *
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class AttributeTypeGroupToAttributeTypeDao extends
	OpenInfraValueValueDao<AttributeTypeGroupToAttributeTypePojo,
	AttributeTypeToAttributeTypeGroup, AttributeType, AttributeTypeGroup> {

	/**
	 * This is the required constructor which calls the super constructor and in
	 * turn creates the corresponding entity manager.
	 *
	 * @param currentProjectId the current project id (this should be null when
	 *                         the system schema is selected)
	 * @param schema           the required schema
	 */
	public AttributeTypeGroupToAttributeTypeDao(
			UUID currentProjectId,
			OpenInfraSchemas schema) {
		super(currentProjectId,
				schema,
				AttributeTypeToAttributeTypeGroup.class,
				AttributeType.class,
				AttributeTypeGroup.class);
	}

	@Override
	public AttributeTypeGroupToAttributeTypePojo mapToPojo(
			Locale locale,
			AttributeTypeToAttributeTypeGroup atgtat) {
        return mapToPojoStatically(locale, atgtat,
                new MetaDataDao(currentProjectId, schema));
	}

	/**
     * This method implements the method mapToPojo in a static way.
     *
     * @param locale the requested language as Java.util locale
     * @param atgtat the model object
     * @param mdDao  the meta data DAO
     * @return       the POJO object when the model object is not null else null
     */
    public static AttributeTypeGroupToAttributeTypePojo mapToPojoStatically(
            Locale locale,
            AttributeTypeToAttributeTypeGroup atgtat,
            MetaDataDao mdDao) {
        if(atgtat != null) {
            AttributeTypeGroupToAttributeTypePojo pojo =
                    new AttributeTypeGroupToAttributeTypePojo(atgtat, mdDao);

            pojo.setAttributeTypeId(atgtat.getAttributeType().getId());
            pojo.setAttributeTypeGroup(
                    AttributeTypeGroupDao.mapToPojoStatically(
                            locale,
                            atgtat.getAttributeTypeGroup(),
                            null));
            pojo.setDefaultValue(ValueListValueDao.mapToPojoStatically(
                    locale,
                    atgtat.getValueListValue(),
                    null));
            pojo.setMultiplicity(MultiplicityDao.mapToPojoStatically(
                    atgtat.getMultiplicityBean(),
                    null));
            pojo.setOrder(atgtat.getOrder());
            return pojo;
        } else {
            return null;
        } // end if else
    }
	@Override
	public MappingResult<AttributeTypeToAttributeTypeGroup> mapToModel(
			AttributeTypeGroupToAttributeTypePojo pojo,
			AttributeTypeToAttributeTypeGroup atg) {

	    // TODO set the model values

        // return the model as mapping result
        return new MappingResult<AttributeTypeToAttributeTypeGroup>(
                atg.getId(), atg);
	}

}
