package de.btu.openinfra.backend.db.daos.project;

import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.UUID;

import org.eclipse.persistence.jpa.JpaQuery;

import de.btu.openinfra.backend.OpenInfraProperties;
import de.btu.openinfra.backend.db.MappingResult;
import de.btu.openinfra.backend.db.OpenInfraOrderBy;
import de.btu.openinfra.backend.db.OpenInfraSchemas;
import de.btu.openinfra.backend.db.OpenInfraSortOrder;
import de.btu.openinfra.backend.db.daos.AttributeTypeDao;
import de.btu.openinfra.backend.db.daos.AttributeValueTypes;
import de.btu.openinfra.backend.db.daos.OpenInfraValueValueDao;
import de.btu.openinfra.backend.db.daos.PtLocaleDao;
import de.btu.openinfra.backend.db.daos.RelationshipTypeDao;
import de.btu.openinfra.backend.db.jpa.model.PtLocale;
import de.btu.openinfra.backend.db.jpa.model.RelationshipType;
import de.btu.openinfra.backend.db.jpa.model.TopicCharacteristic;
import de.btu.openinfra.backend.db.jpa.model.TopicInstance;
import de.btu.openinfra.backend.db.jpa.model.TopicInstanceXTopicInstance;
import de.btu.openinfra.backend.db.pojos.project.TopicInstanceAssociationToPojo;
import de.btu.openinfra.backend.exception.OpenInfraEntityException;
import de.btu.openinfra.backend.exception.OpenInfraExceptionTypes;

/**
 * This class represents the TopicInstanceAssociation and is used to access the
 * underlying layer generated by JPA.
 *
 * @author <a href="http://www.b-tu.de">BTU</a> DBIS
 *
 */
public class TopicInstanceAssociationToDao extends OpenInfraValueValueDao<
	TopicInstanceAssociationToPojo,
	TopicInstanceXTopicInstance,
	TopicInstance, TopicInstance> {

	/**
	 * This is the required constructor which calls the super constructor and
	 * in turn creates the corresponding entity manager.
	 *
	 * @param currentProjectId the current project id (this should be null when
	 *                         the system schema is selected)
	 * @param schema           the required schema
	 */
	public TopicInstanceAssociationToDao(
			UUID currentProjectId,
			OpenInfraSchemas schema) {
		super(
				currentProjectId,
				schema,
				TopicInstanceXTopicInstance.class,
				TopicInstance.class, TopicInstance.class);
	}

	@Override
	public TopicInstanceAssociationToPojo mapToPojo(
			Locale locale,
			TopicInstanceXTopicInstance txt) {
        if (txt != null) {
            TopicInstanceAssociationToPojo pojo =
                    new TopicInstanceAssociationToPojo(txt);
            pojo.setAssociationInstanceId(txt.getTopicInstance1Bean().getId());
            pojo.setRelationshipType(
                    new RelationshipTypeDao(currentProjectId, schema).mapToPojo(
                            locale,
                            txt.getRelationshipType()));
            pojo.setAssociatedInstance(
                    new TopicInstanceDao(currentProjectId, schema).mapToPojo(
                            locale,
                            txt.getTopicInstance2Bean()));
            return pojo;
        } else {
            return null;
        }
    }

    public List<TopicInstanceAssociationToPojo> readAssociationToByTopchar(
    		Locale locale, UUID topicInstance, UUID topChar,
    		int offset, int size, OpenInfraSortOrder sortOrder,
            OpenInfraOrderBy orderBy) {
    	return readAssociation(locale, topicInstance, topChar,
    			"TopicInstanceXTopicInstance"
    			+ ".findAssociationToByTopicInstanceAndTopicCharacteristic",
    			offset, size, sortOrder, orderBy);
    }

    public List<TopicInstanceAssociationToPojo> readAssociation(
            Locale locale, UUID topicInstance, UUID topChar, String queryName,
            int offset, int size) {
        List<TopicInstanceXTopicInstance> tixtiList = em.createNamedQuery(
                queryName, TopicInstanceXTopicInstance.class)
                .setParameter("topicInstance",
                        em.find(TopicInstance.class, topicInstance))
                .setParameter("topicCharacteristic",
                        em.find(TopicCharacteristic.class, topChar))
                .setFirstResult(offset).setMaxResults(size).getResultList();
        List<TopicInstanceAssociationToPojo> pojoList =
                new LinkedList<TopicInstanceAssociationToPojo>();
        for(TopicInstanceXTopicInstance tixti : tixtiList) {
            pojoList.add(mapToPojo(locale, tixti));
        }
        return pojoList;
    }

    @SuppressWarnings("unchecked")
    public List<TopicInstanceAssociationToPojo> readAssociation(
    		Locale locale, UUID topicInstance, UUID topChar, String queryName,
    		int offset, int size, OpenInfraSortOrder order,
    		OpenInfraOrderBy column) {

        // Define a list which holds the POJO objects
        List<TopicInstanceAssociationToPojo> pojos =
                new LinkedList<TopicInstanceAssociationToPojo>();

        // Define a model object that contains the query result
        List<TopicInstanceXTopicInstance> models = null;

        // Use the default values for language and order when null.
        if(locale == null) {
            locale = OpenInfraProperties.DEFAULT_LANGUAGE;
        }
        if(order == null) {
            order = OpenInfraProperties.DEFAULT_ORDER;
        }

        // get the locale id
        UUID localeId = new PtLocaleDao(
                currentProjectId, schema).read(locale).getId();

        try {
            if (column.isUuid()) {
                // Get the attribute value types from the object with the passed
                // attribute type id
                AttributeValueTypes atType = new AttributeTypeDao(
                        currentProjectId, schema).read(
                                locale, UUID.fromString(
                                        column.getContent().toString()))
                                        .getType();

                // Handle each attribute value type in a different way
                switch (atType) {
                case ATTRIBUTE_VALUE_VALUE:
                    // Set native query name for attribute value value objects
                    queryName += "ByLocaleAndOrderForValues";
                    break;
                case ATTRIBUTE_VALUE_DOMAIN:
                    // Set native query name for attribute value domain objects
                    queryName += "ByLocaleAndOrderForDomains";
                    break;
                default:
                    // Sorting by geometry is not supported
                    return readAssociation(locale, topicInstance, topChar,
                            queryName, offset, size);
                }

                // Retrieve the uuid of the xx locale
                UUID localeXXId = em.createNamedQuery(
                        "PtLocale.xx",
                        PtLocale.class)
                        .getSingleResult().getId();

                // Construct origin SQL-based named query and append sort order
                String sqlString = em.createNamedQuery(queryName)
                        .unwrap(JpaQuery.class).getDatabaseQuery()
                        .getSQLString();
                sqlString += " " + order.name();

                // Retrieve the informations from the database
                models = em.createNativeQuery(
                                sqlString,
                                modelClass)
                            .setParameter(1, column.getContent())
                            .setParameter(2, localeId)
                            .setParameter(3, localeXXId)
                            .setParameter(4, topicInstance)
                            .setParameter(5, topChar)
                            .setFirstResult(offset)
                            .setMaxResults(size)
                            .getResultList();
            } else {
                throw new OpenInfraEntityException(
                        OpenInfraExceptionTypes.WRONG_SORT_TYPE);
            }
        } catch (NullPointerException | IllegalArgumentException e) {
            // Accessing the column object will lead to a NullPointerException
            // if no orderBy parameter was passed. If no NamedQuery exists in
            // the model class an IllegalArgumentException is thrown. In both
            // cases we can call the standard read method.
            return readAssociation(locale, topicInstance, topChar, queryName,
                    offset, size);
        }

        // Map the JPA model objects to POJO objects
        for(TopicInstanceXTopicInstance modelItem : models) {
            pojos.add(mapToPojo(locale, modelItem));
        } // end for
        return pojos;
    }

	@Override
	public MappingResult<TopicInstanceXTopicInstance> mapToModel(
			TopicInstanceAssociationToPojo pojo,
			TopicInstanceXTopicInstance txt) {

	    // set relationship type
        try {
            txt.setRelationshipType(em.find(
                    RelationshipType.class,
                    pojo.getRelationshipType().getUuid()));
        } catch (NullPointerException npe) {
            throw new OpenInfraEntityException(
                    OpenInfraExceptionTypes.MISSING_DATA_IN_POJO);
        }

        // set association instance
        try {
            txt.setTopicInstance1Bean(em.find(
                    TopicInstance.class,
                    pojo.getAssociationInstanceId()));
        } catch (NullPointerException npe) {
            throw new OpenInfraEntityException(
                    OpenInfraExceptionTypes.MISSING_DATA_IN_POJO);
        }

        // set associated instance
        try {
            txt.setTopicInstance2Bean(em.find(
                    TopicInstance.class,
                    pojo.getAssociatedInstance().getUuid()));
        } catch (NullPointerException npe) {
            throw new OpenInfraEntityException(
                    OpenInfraExceptionTypes.MISSING_DATA_IN_POJO);
        }

        // return the model as mapping result
        return new MappingResult<TopicInstanceXTopicInstance>(
                txt.getId(), txt);
	}

}